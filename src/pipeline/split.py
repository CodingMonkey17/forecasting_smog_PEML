# src/pipeline/split.py

# Functions related to the data split (train, validation, test).

# For the thesis, the data set-up/distribution was:
# - training data: 
#   September, October, November, December of 2017, 2018, 2020,
#   and September, October, first 2 weeks of November of 2021, 2022  
# 
# - validation data: 
#   Last 2 weeks of November, first week of December of 2021, 2022,
#   and September and first 2 weeks of October of 2023  
# 
# - testing data:  
#   Last 3 weeks of December of 2022,
#   and last 2 weeks of October and November of 2023  
#
# This can be generated by taking the configuration/variables:
# - years: 2017, 2018, 2020, 2021, 2022, 2023
# - starting month: 08 (i.e. September)
# - ending month: 12 (i.e. December)
# - days_vali for train-validation-test-years: 21
# - days_test for train-validation-test-years: 21
# - days_vali for validation-test-years: 63
# - days_test for validation-test-years: 63
#
# This resulted in a %-ratio of [76.3/11.9/11.9] for
# [train/validation/test]. For more information, see the thesis


from typing import Tuple
import pandas as pd


def perform_data_split(
        df: pd.DataFrame, days_vali: int, days_test: int
    ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """
    Performs a train-validation-test split on the data:
    - calculates partition points for validation and test set
      expressed in hours for indexing
    - partitions the data into train, validation and test set

    :param df: the data to be split
    :param days_vali: number of days for the validation set
    :param days_test: number of days for the test set
    :return: the apliited sets
    """
    pp_vali = int(df.shape[0] - (days_vali + days_test) * 24)
    pp_test = int(pp_vali + days_test * 24)
    
    df_train = df[ : pp_vali]
    df_vali  = df[pp_vali : pp_test]
    df_test  = df[pp_test : ]

    return df_train, df_vali, df_test


def perform_data_split_without_train(
        df: pd.DataFrame, days_vali: int, days_test: int
    ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """
    Similar to perform_data_split(). but without the train set.
    This is used for splitting years of data only appointed to
    the validation and test set (usually the final year(s))

    :param df: the data to be split
    :param days_vali: number of days for the validation set
    :param days_test: number of days for the test set
    :return: the apliited sets
    """
    pp_vali = int(days_vali * 24)
    pp_test = int(pp_vali + days_test * 24)
    
    df_vali  = df[ : pp_vali]
    df_test  = df[pp_vali : pp_test]

    return df_vali, df_test


def print_split_ratios(
        dfs_train: list, df_val: pd.DataFrame, df_test: pd.DataFrame, comp: str):
    """
    Prints the splitting ratios (useful
    after the train-validaiton-test split)
    
    :param dfs_train: list of training DataFrames
    :param df_val: validation set DataFrame
    :param df_test: testing set DataFrame
    :param comp: component name (although they all (should) have the same ratio)
    """
    total_len = sum([len(df) for df in dfs_train]) + len(df_val) + len(df_test)
    print(f"[train/validation/test] %-ratio for {comp} data is: ", end = '')
    print(f"[{round((sum([len(df) for df in dfs_train])) / total_len * 100, 1)}/", end = '')
    print(f"{round(len(df_val) / total_len * 100, 1)}/{round(len(df_test) / total_len * 100, 1)}]")